@model IEnumerable<Cargo>

@{
	ViewData["Title"] = "Lista de Cargos";
}

<h1>@ViewData["Title"]</h1>
<h5>Los cargos se usaran para agrupar a los empleados segun su cargo. Ejemplos: Gerentes General, Gerente de ventas, Analista de datos, etc.</h5>

<a asp-action="Crear" class="btn1">Crear Nuevo</a>

<p></p>
<table class="table">
	<thead>
		<tr>
			<th>Nombre</th>
			<th>Codigo</th>
			<th>Descripcion</th>
			<th>Acciones</th>
		</tr>
	</thead>

	<tbody>
		@foreach (var cargo in Model)
		{
			<tr>
				<td>@cargo.Nombre</td>
				<td>@cargo.Codigo</td>
				<td>@cargo.Descripcion</td>
				<td>
					<input type="hidden" asp-for="@cargo.Id" />
					<a asp-action="Editar" asp-route-id="@cargo.Id" class="btn btn-outline-primary">Editar</a>
					<a asp-action="Borrar" asp-route-id="@cargo.Id" class="btn btn-outline-danger">Borrar</a>
				</td>
			</tr>
		}
	</tbody>

</table>

@*@section Scripts{
	<script>

		const urlOrdenar = '@Url.Action("Ordenar")';

		$(function () {
			$("#reordenable").sortable({
				stop: async function (e, ui) {
					await actualizarOrdenes();
				}
			});

			async function actualizarOrdenes() {
				const ids = obtenerIdsDeElementos();
				await enviarIdsAlBackend(ids);
			}

			function obtenerIdsDeElementos() {
				const ids = $('.ids').map(function () {
					//console.log($(this).val());
					return $(this).val();
				}).get();

				return ids;
			}

			async function enviarIdsAlBackend(ids) {
				var data = JSON.stringify(ids);
				await fetch(urlOrdenar, {
					method: 'POST',
					body: data,
					headers: {
						'Content-Type': 'application/json'
					}
				});
			}
		})
	</script>
}*@